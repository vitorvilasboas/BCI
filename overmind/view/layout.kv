<StartScreen>:
    login: usuario
    on_pre_enter: if root.session.info.flag: root.update_screen() # teste
    AnchorLayout:
        anchor_x: 'center'
        anchor_y: 'center'
        canvas:
            Color:
                rgba: 185, 182, 183, 0.67 # 128, 128, 128, 0.5
            Rectangle:
                size:self.size
                pos:self.pos
        BoxLayout:
            orientation: 'vertical'
            spacing: 20
            padding: 20
            size_hint: None, None
            size: self.minimum_size
            Label:
                font_size: 20
                text: 'OverMind: a MI-based BCI Platform'
                color: 0, 0, 0, 1
            Label:
                text: root.label_msg
                font_size: 20
            TextInput:
                id: usuario
                size_hint: None,None
                hint_text: 'User Name'
                text: root.session_text
                font_size: 20
                size: 200,self.minimum_height
                multiline: False
            Button:
                text: 'Entry'
                on_press: root.check_login()
                size_hint: None,None
                size: 200,50
            Button:
                text: 'Register'
                on_press: root.change_to_register()
                size_hint: None,None
                size: 200,50

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<Register>
    on_pre_enter: root.clear_fields()
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            canvas:
                Color:
                    rgba: 0, 0, 0,0
                Rectangle:
                    pos: self.pos
                    size: self.size
            StdSettingsContainer:
                pos_hint: {'top': 1}
                StdSettingTitle:
                    title: 'Real user Selection'
                    desc: 'Set the info about user'
                StdSettingString:
                    id: field_nickname
                    title: 'Nick'
                    desc: 'Set user nickname'
                    value: ''
                StdSettingString:
                    id: field_fullname
                    title: 'Full Name'
                    desc: 'Set user full Name'
                    value: ''
                StdSettingSlider:
                    id: field_age
                    title: 'Age'
                    type: 'int'
                    desc: 'Set user age'
                    value: 25
                    min: 0
                    max: 120
                StdSettingItem:
                    id: item_gender
                    title: 'Gender'
                    desc: 'User gender'
                    Spinner:
                        id: field_gender
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: ['Male', 'Female', 'Other']

                StdSettingItem:
                    id: item_belongs_dataset
                    title: 'Does it belong to a public data set?'
                    CheckBox:
                        id: belongs_dataset
                        on_release: root.enable_dataset()
                StdSettingItem:
                    id: item_dataset
                    title: 'Dataset'
                    desc: 'Choose dataset'
    #                disabled: True if root.parent.parent.mode_menu.belongs_dataset.active else False
                    Spinner:
                        id: field_dataset
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: root.ds_list
                        on_text: root.update_subject_values()
                StdSettingItem:
                    id: item_subject
                    title: 'Subject'
                    desc: 'Choose subject'
                    Spinner:
                        id: field_subject
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: ''
                StdSettingSlider:
                    id: field_srate
                    title: 'Sample Rate'
                    type: 'int'
                    desc: 'Sample Rate in Hz of the input dataset'
                    value: 250
                    min: 0
                    max: 1000
                    disabled: True
        GridLayout:
            rows: 1
            size_hint: (1, None)
            height: 50
            spacing: 5
            padding: 5
            Button:
                font_size: 20
                text: 'Back'
                on_press: root.back_to_start()
            Button:
                font_size: 20
                text: 'Save'
                on_press: root.check_register()

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<BCIMenu>:
    on_pre_enter: root.update_screen()
    #on_enter: if root.session.info.flag: root.update_screen()

    AnchorLayout:
        anchor_x: 'center'
        anchor_y: 'center'
        canvas:
            Color:
                rgba: 185, 182, 183, 0.67 # 128, 128, 128, 0.5
            Rectangle:
                size:self.size
                pos:self.pos
        BoxLayout:
            id: box
            orientation: 'vertical'
            spacing: 20
            padding: 20
            size_hint: None, None
            size: self.minimum_size
#            Label:
#                font_size: 20
#                text: 'BCI Menu'
            Button:
                id: acq_button
                text: 'Acquisition'
                on_press: root.change_to_acquisition()
                size_hint: None,None
                size: 200,50
            Button:
                text: 'Calibration'
                on_press: root.change_to_calibration()
                size_hint: None,None
                size: 200,50
            Button:
                id: command_button
                text: root.label_command #'Live Command'
                on_press: root.change_to_command()
                size_hint: None,None
                size: 200,50
            Button:
                text: 'Logout'
                on_press: root.exit()
                size_hint: None,None
                size: 200,50

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<AcqMode>:
    on_pre_enter: if root.session.acq.flag_mode: root.load_saved_settings()
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            canvas:
                Color:
                    rgba: 0, 0, 0, 0
                Rectangle:
                    pos: self.pos
                    size: self.size
            StdSettingsContainer:
                pos_hint: {'top': 1}
                StdSettingTitle:
                    title: 'Acquisition configuration'
                    desc: 'Configure the connection with Acquisition board'
                StdSettingItem:
                    id: item_acq_board
                    title: 'Acquisition Board'
                    desc: 'Set the acquisition equipment for EEG measurement'
                    Spinner:
                        id: acq_board
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: ['< Select >','OpenBCI Cyton']
                        on_text: root.update_settings()
                StdSettingString:
                    id: com_port
                    title: 'COM port'
                    desc: 'Serial port which USB dongle is connected to (in linux use lsusb to find out)'
                    value: '/dev/ttyUSB0'
                    disabled: True
                StdSettingBoolean:
                    id: daisy
                    title: 'Enable Daisy'
                    desc: 'Check if you want to use the additional daisy channels. (daisy must be plugged in)'
                    button_text: 'Daisy'
                    value: False
                    on_value: srate.value = 125 if self.value else 250
                    disabled: True
                StdSettingSlider:
                    id: srate
                    title: 'Sample Rate'
                    type: 'int'
                    desc: 'Sample Rate in Hz of the input dataset'
                    disabled: True
                    value: 250
                    min: 0
                    max: 1000
                StdSettingString:
                    id: ch_labels
                    title: 'Channel Labels'
                    desc: 'Give labels to used channels. ex: Cz C3 P3 P4'
                    value: ''
                    disabled: True
                StdSettingTitle:
                    title: 'Simulator configuration'
                    desc: 'Set the params to simulate acquisition'
                StdSettingItem:
                    id: item_simulator
                    title: 'Simulate Acquisition?'
                    desc: 'Check to simulate from other eeg data'
                    Switch:
                        id: simulator
                        active: False
                        size_hint: None,None
                        on_touch_down: root.update_settings()
                        on_touch_move: root.update_settings() #simu_data_path.disabled = False if self.active else True
                        on_touch_up: root.update_settings() #simu_data_path.disabled = False if self.active else True

                GridLayout:
                    size_hint_y: None
                    height: 70
                    rows: 1
                    canvas:
                        Color:
                            rgba: 47 / 255., 167 / 255., 212 / 255., .1
                        Rectangle:
                            pos: self.x, self.y + 1
                            size: self.size
                        Color:
                            rgb: .2, .2, .2
                        Rectangle:
                            pos: self.x, self.y - 2
                            size: self.width, 1
                    Label:
                        size_hint_x: .6
                        id: labellayout
                        markup: True
                        title: 'Path to EEG data file'
                        desc: 'The path to the EEG dataset for playback (.omi)'
                        text: u'{0}\n[size=13sp][color=999999]{1}[/color][/size]'.format(self.title or '', self.desc or '')
                        font_size: '15sp'
                        text_size: self.size
                        valign: 'top'
                    AnchorLayout:
                        id: eeg_path
                        size_hint_x: None
                        width: 500
                        value: input.text
                        TextInput:
                            id: input
                            size_hint_y: None
                            height: 30
                            multiline: True
                            text: eeg_path.value
                            on_focus: root.update_settings()

                StdSettingItem:
                    id: item_class_ids
                    title: 'Event Ids'
                    desc: 'List of event labels for epoch extraction. ex: 1 2'
                    disabled: True
                    Spinner:
                        id: class_ids
                        disabled: True
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: ''
                        on_text: root.update_settings()

#                StdSettingBoolean:
#                    id: dummy_data
#                    title: 'Use Dummy Data' #u'Usar Dados fict\u00edcios?'
#                    #u'Produz dados fict\u00edcios simulando uma placa OpenBCI com m\u00f3dulo daisy acoplado'
#                    desc: 'Output dummy data by simulating an OpenBCI board with daisy module'
#                    value: False
#                    on_value:
#                        if self.value: srate.value = 125

        GridLayout:
            rows: 1
            size_hint: (1, None)
            height: 50
            spacing: 5
            padding: 5
            Button:
                font_size: 20
                text: 'Back'
                on_press: root.back_to_bci()
            Button:
                id: btn_next_step_acq
                disabled: True
                font_size: 20
                text: 'Next'
                on_press: root.change_to_acq_protocol()


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<AcqProtocol>:
    on_pre_enter: if root.session.acq.flag_mode and root.session.acq.flag_protocol: root.update_settings()
    BoxLayout:
        orientation: 'vertical'
        #ScreenManager:
            #Screen:
        ScrollView:
            canvas:
                Color:
                    rgba: 0, 0, 0, 0
                Rectangle:
                    pos: self.pos
                    size: self.size
            StdSettingsContainer:
                pos_hint: {'top': 1}
                StdSettingTitle:
                    title: 'Calibration and Validation Settings'
                    desc: 'Set config for input data'
                StdSettingSlider:
                    id: n_runs
                    title: 'Number of Runs'
                    type: 'int'
                    desc: 'A run is a set of trials'
                    value: 2 #4
                    min: 1
                    max: 200
                StdSettingSlider:
                    id: n_trials
                    title: 'Number of Trials per run'
                    type: 'int'
                    desc: 'Number of trials to be displayed per run (must be even)' #
                    value: 4 #14
                    min: 1
                    max: 200
                StdSettingSlider:
                    id: runs_interval
                    title: 'Time interval in seconds between runs'
                    type: 'float'
                    desc: 'A run is a set of trials.'
                    value: 10 #30
                    min: 0
                    max: 120
                StdSettingSlider:
                    id: cue_offset
                    title: 'Cue Offset (s)'
                    type: 'float'
                    desc: 'Time in seconds from the beginning of a trial until the cue display'
                    value: 3
                    min: 1
                    max: 20
                    on_touch_move: trial_duration.value = cue_offset.value + cue_time.value + pause_min.value + 1   # root.update_trial_duration()
                    on_touch_up: trial_duration.value = cue_offset.value + cue_time.value + pause_min.value + 1     # root.update_trial_duration()
                    on_touch_down: trial_duration.value = cue_offset.value + cue_time.value + pause_min.value + 1   # root.update_trial_duration()
                StdSettingSlider:
                    id: cue_time
                    title: 'Cue display time (s)'
                    type: 'float'
                    desc: 'Duration in seconds of cue display'
                    value: 6
                    min: 1
                    max: 20
                    on_touch_move: trial_duration.value = cue_offset.value + cue_time.value + pause_min.value + 1   # root.update_trial_duration()
                    on_touch_up: trial_duration.value = cue_offset.value + cue_time.value + pause_min.value + 1     # root.update_trial_duration()
                    on_touch_down: trial_duration.value = cue_offset.value + cue_time.value + pause_min.value + 1   # root.update_trial_duration()
                StdSettingSlider:
                    id: pause_min
                    title: 'Min Pause Time (s)'
                    type: 'float'
                    desc: 'Minimal time in seconds to wait to start a new trial'
                    value: 3
                    min: 1
                    max: 20
                    on_touch_move: trial_duration.value = cue_offset.value + cue_time.value + pause_min.value + 1   # root.update_trial_duration()
                    on_touch_up: trial_duration.value = cue_offset.value + cue_time.value + pause_min.value + 1     # root.update_trial_duration()
                    on_touch_down: trial_duration.value = cue_offset.value + cue_time.value + pause_min.value + 1   # root.update_trial_duration()
                StdSettingSlider:
                    id: trial_duration
                    title: 'End Of Trial Offset (s)'
                    type: 'float'
                    desc: 'Time in seconds from the beginning of a trial to the point when the trial ends'
                    value: 8
                    min: cue_offset.value + cue_time.value + pause_min.value + 1
                    max: 62
                    disabled: True
        GridLayout:
            rows: 1
            size_hint: (1, None)
            height: 50
            spacing: 5
            padding: 5
            Button:
                font_size: 20
                text: 'Back'
                on_press: root.back_to_bci()
            Button:
                font_size: 20
                text: 'Save & Run'
                on_press: root.run_acq()


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<AcqRun>:
    carousel: carrossel
    BoxLayout:
        orientation: 'vertical'
        spacing: 10
        padding: 20
        canvas:
            Color:
                rgba: 185, 182, 183, 0.67 # 128, 128, 128, 0.5
            Rectangle:
                size:self.size
                pos:self.pos
        BoxLayout:
            orientation: 'horizontal'
            spacing: 30
            padding: 20
#            BoxLayout:
#                id: bar_left
#                size_hint_x: 0.1
#                canvas:
#                    Color:
#                        rgba: 1,1,0,1
#                    Line:
#                        width: 2
#                        points:
#                            (0, self.pos[1] + self.size[1]*0.8, \
#                            self.size[0]/2, self.pos[1] + self.size[1]*0.8)
#                    Color:
#                        rgba: 1,1,1,1
#                    Line:
#                        width: 2
#                        points:
#                            (0, self.pos[1] + self.size[1], \
#                            self.size[0]/2, self.pos[1] + self.size[1])
#                Bar:
#                    orientation: 'bt'
#                    color: root.accum_color_left
#                    animated: False
#                    value: root.inst_prob_left
            RelativeLayout:
                size_hint_x: 0.8
                Carousel:
                    id: carrossel
                    direction: 'right'
                    Image:
                        id: cross
                        source: root.fig_list[0]
                    Image:
                        id: aleft
                        source: root.fig_list[1]
                    Image:
                        id: aright
                        source: root.fig_list[2]
                    Image:
                        id: blank
                        source: root.fig_list[3]
                    Image:
                        id: break
                        source: root.fig_list[4]
#            BoxLayout:
#                size_hint_x: 0.1
#                canvas:
#                    Color:
#                        rgba: 1,1,0,1
#                    Line:
#                        width: 2
#                        points:
#                            (self.size[0]/2 + self.pos[0], self.pos[1] + self.size[1]*0.8, \
#                            root.size[0], self.pos[1] + self.size[1]*0.8)
#                    Color:
#                        rgba: 1,1,1,1
#                    Line:
#                        width: 2
#                        points:
#                            (self.size[0]/2 + self.pos[0], self.pos[1] + self.size[1], \
#                            root.size[0], self.pos[1] + self.size[1])
#                Bar:
#                    orientation: 'bt'
#                    color: root.accum_color_right
#                    animated: False
#                    value: root.inst_prob_right
        GridLayout:
            rows: 1
            size_hint: (1, None)
            height: 50
            spacing: 5
            padding: 5
            Button:
                font_size: 20
                text: 'Back'
                on_press: root.back_to_acq()
            Button:
                font_size: 20
                text: root.button_stream
                on_press: root.toggle_stream()

<AcqSavePopup>:
    size_hint: None, None
    size: 300, 250
    title: 'Acquisition Data'
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            TextInput:
                id: save_name
                hint_text: 'save as'
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'Save Data and Events'
                on_press: if save_name.text != '': root.save_acquisition(save_name.text)
                on_release: if save_name.text != '': root.dismiss()

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<CalLoad>:
    on_pre_enter: if root.session.dp.flag_load: root.load_saved_settings()
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            canvas:
                Color:
                    rgba: 0, 0, 0, 0
                Rectangle:
                    pos: self.pos
                    size: self.size
            StdSettingsContainer:
                StdSettingTitle:
                    title: 'User Data Info and General Settings for Calibration'
                    desc: 'Set EEG files to load and first info about data'

#                StdSettingStringLong:
#                    id: eeg_path
#                    title: 'Path to EEG file'
#                    desc: 'The path to the EEG dataset for processing'
#                    value: ''
#                    # on_enter: root.update_eeg_info()

                GridLayout:
                    size_hint_y: None
                    height: 70
                    rows: 1
                    canvas:
                        Color:
                            rgba: 47 / 255., 167 / 255., 212 / 255., .1
                        Rectangle:
                            pos: self.x, self.y + 1
                            size: self.size
                        Color:
                            rgb: .2, .2, .2
                        Rectangle:
                            pos: self.x, self.y - 2
                            size: self.width, 1
                    Label:
                        size_hint_x: .6
                        id: labellayout
                        markup: True
                        title: 'Path to EEG file'
                        desc: 'The path to the EEG dataset for processing'
                        text: u'{0}\n[size=13sp][color=999999]{1}[/color][/size]'.format(self.title or '', self.desc or '')
                        font_size: '15sp'
                        text_size: self.size
                        valign: 'top'
                    AnchorLayout:
                        id: eeg_path
                        size_hint_x: None
                        width: 500
                        value: input.text
                        TextInput:
                            id: input
                            size_hint_y: None
                            height: 30
                            multiline: True
                            text: eeg_path.value
                            on_focus: root.update_settings()

#                StdSettingStringLong:
#                    id: labels_path
#                    title: 'Path to labels'
#                    desc: 'The path to the labels of EEG dataset'
#                    value: ''

#                StdSettingString:
#                    id: class_ids
#                    title: 'Event Ids'
#                    desc: 'List of event labels for epoch extraction. ex: 1 2'
#                    value: '1 2'

                StdSettingItem:
                    id: item_class_ids
                    title: 'Event Ids'
                    desc: 'List of event labels for epoch extraction. ex: 1 2'
                    disabled: True
                    Spinner:
                        id: class_ids
                        disabled: True
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: '' # root.class_ids_list
                        # on_text: root.update_subject_values()

                StdSettingSlider:
                    id: srate
                    title: 'Sample Rate'
                    type: 'int'
                    desc: 'Sample Rate in Hz of the input dataset'
                    value: 250
                    min: 0
                    max: 1000
                    disabled: True
                StdSettingString:
                    id: channels
                    title: 'Channels'
                    desc: 'List of channels idx used for signal processing. Indexes must be between 1 and ' + str(root.max_channels) + ' ( -1 for all )\nEx: 1 2 3 6 11  or  2:10'
                    value: '-1'
                    disabled: True
                StdSettingTitle:
                    title: 'Performance Analysis Definitions'
                    desc: 'Set parameters for validation analysis'
                StdSettingItem:
                    id: item_cross_val
                    title: 'Use Cross-validation'
                    desc: 'Check if use cross-validation'
                    disabled: True
                    Switch:
                        id: cross_val
                        disabled: True
                        active: False
                        size_hint: None,None
                        #size: 200,50
                        on_touch_down: n_folds.disabled = False if self.active else True # root.check_crossval_enabled()
                        on_touch_move: n_folds.disabled = False if self.active else True # root.check_crossval_enabled()
                        on_touch_up: n_folds.disabled = False if self.active else True # root.check_crossval_enabled()
                StdSettingSlider:
                    id: n_folds
                    title: 'Number of Cross-validation Iteractions'
                    type: 'int'
                    desc: 'The model will be trained and applied'
                    value: 10
                    min: 1
                    max: 20
                    disabled: True
                StdSettingSlider:
                    id: test_perc
                    title: 'Fraction of test epochs'
                    type: 'float'
                    desc: 'The model will be trained using (1-perc) and tested on perc of the dataset (also for each cross-validation iteraction)'
                    value: 0.5
                    min: 0.1
                    max: 0.8
                    disabled: True
        GridLayout:
            rows: 1
            size_hint: (1, None)
            height: 50
            spacing: 5
            padding: 5
            Button:
                font_size: 20
                text: 'Back'
                on_press: root.back_to_bci()
            Button:
                id: btn_save_progress
                font_size: 20
                text: 'Save and Progress'
                on_press: root.save_and_progress()
                disabled: True

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<CalSettings>:
    on_pre_enter: if root.session.dp.flag_setup: root.update_settings()
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            canvas:
                Color:
                    rgba: 0, 0, 0,0
                Rectangle:
                    pos: self.pos
                    size: self.size
            StdSettingsContainer:
                StdSettingTitle:
                    title: 'Auto-setup Definitions'
                    desc: 'Set parameters to setup system'
                StdSettingItem:
                    title: 'Auto-setup?'
                    desc: 'Check if you want a automatic calibration params'
                    Switch:
                        id: check_auto_cal
                        size_hint: None,None
                        on_touch_down: root.set_enabled_field()
                        on_touch_move: root.set_enabled_field()
                        on_touch_up: root.set_enabled_field()
                StdSettingItem:
                    id: item_load_last_setup
                    title: 'Load last auto setup?'
                    CheckBox:
                        id: load_last_setup
                        #on_release: root.update_screen()
                StdSettingSlider:
                    id: n_iter
                    title: 'Auto Setup Iterations Number' #'Taxa de amostragem'
                    type: 'int'
                    desc: 'Iteration number to calibrate the system' #'Taxa de amostragem em Hz do conjunto de dados de entrada'
                    value: 100
                    min: 1
                    max: 10000
                StdSettingTitle:
                    title: 'Epoch Extraction Settings'
                    desc: 'Define the epoch limits and properties'
                StdSettingSlider:
                    id: epoch_start
                    title: 'Epoch Start'
                    type: 'float'
                    desc: 'Time in sec after the event when the epoch starts'
                    value: 0
                    min: root.epoch_lim_min
                    max: root.epoch_lim_max - 1
                    on_touch_move: buf_len.value = int(epoch_end.value * root.srate) - int(epoch_start.value * root.srate)
                    on_touch_up: buf_len.value = int(epoch_end.value * root.srate) - int(epoch_start.value * root.srate)
                    on_touch_down: buf_len.value = int(epoch_end.value * root.srate) - int(epoch_start.value * root.srate)
                StdSettingSlider:
                    id: epoch_end
                    title: 'Epoch End'
                    type: 'float'
                    desc: 'Time in sec after the event when the epoch ends'
                    value: epoch_start.value + 2
                    min: epoch_start.value + 1
                    max: root.epoch_lim_max
                    on_touch_move: buf_len.value = int(epoch_end.value * root.srate) - int(epoch_start.value * root.srate)
                    on_touch_up: buf_len.value = int(epoch_end.value * root.srate) - int(epoch_start.value * root.srate)
                    on_touch_down: buf_len.value = int(epoch_end.value * root.srate) - int(epoch_start.value * root.srate)
                StdSettingSlider:
                    id: buf_len
                    title: 'Buffer Length'
                    type: 'int'
                    desc: 'Length in samples of the circular buffer'
                    value: int(epoch_end.value * root.srate) - int(epoch_start.value * root.srate)
                    min: 0
                    max: 2000
                    disabled: True
#                StdSettingTitle:
#                    title: 'Epoch Rejection Settings'
#                    desc: 'Define properties for valid epochs'
#                StdSettingSlider:
#                    id: max_amp
#                    title: 'Maximum Amplitude'
#                    type: 'float'
#                    desc: 'Maximum amplitude (uV) allowed for filtered epoch'
#                    value: 50
#                    min: 0
#                    max: 500
#                StdSettingSlider:
#                    id: max_mse
#                    title: 'Maximum MSE from mean fft'
#                    type: 'float'
#                    desc: 'Maximum mean squared error between epoch fft and mean fft from training set'
#                    value: 0.1
#                    min: 0.01
#                    max: 1
                StdSettingTitle:
                    title: 'Sub-band Approach Definitions'
                    desc: 'Choice between sub-band or classic approach and defines params'
                StdSettingItem:
                    id: item_sb_method
                    title: 'Uses Sub-band Approach'
                    desc: 'Check if use sub-bands approach'
                    Switch:
                        id: sb_method
                        size_hint: None,None
                        #size: 200,50
                StdSettingSlider:
                    id: n_sbands
                    title: 'Sub-bands number'
                    type: 'int'
                    desc: 'Number of sub-bands'
                    value: 1
                    min: 1
                    max: 50
                StdSettingItem:
                    id: item_overlap
                    title: 'Use Overlap'
                    desc: 'Check if use overlap between sub-bands'
                    Switch:
                        id: overlap
                        size_hint: None,None
                        #size: 200,50

                StdSettingTitle:
                    title: 'Temporal Filter configuration'
                    desc: 'Set filter parameters'
                StdSettingItem:
                    id: item_filt_approach
                    title: 'Filter Type'
                    desc: 'Choose between IIR or FFT Filtering'
                    Spinner:
                        id: filt_approach
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: ['IIR', 'FIR', 'DFT']
                        on_text: root.set_enabled_field()
                StdSettingSlider:
                    id: f_low
                    title: 'Lower Cuttoff Frequency'
                    type: 'float'
                    desc: 'The lower frequency limit in Hz of the bandpass filter'
                    value: 8
                    min: 0 # 0.5
                    max: 50
                StdSettingSlider:
                    id: f_high
                    title: 'Upper Cuttoff Frequency'
                    type: 'float'
                    desc: 'The upper frequency limit in Hz of the bandpass filter'
                    value: 30
                    min: f_low.value
                    max: 100
                StdSettingSlider:
                    id: f_order
                    title: 'Filter Order'
                    type: 'float'
                    desc: 'The IIR filter Order'
                    value: 5
                    min: 1
                    max: 10

                StdSettingTitle:
                    title: 'Learner Settings'
                    desc: 'Set parameters of machine learning algorithms'
                StdSettingSlider:
                    id: csp_nei
                    title: 'Number of CSP eigenvectors'
                    type: 'int'
                    desc: 'Must be an even number'
                    value: 8
                    min: 2
                    max: 22
                StdSettingItem:
                    id: item_clf1
                    title: 'Final Classification Model'
                    desc: 'Choose the classification model'
                    Spinner:
                        id: clf1
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: ['KNN', 'LDA', 'MLP', 'SVM', 'DTree', 'Bayes']
#                        on_release: root.set_enabled_field()
#                        on_press: root.set_enabled_field()
                        on_text: root.set_enabled_field()
#                StdSettingItem:
#                    id: item_clf2
#                    title: 'Sub-band Classification Model'
#                    desc: 'Choose the classification model to sub-bands'
#                    Spinner:
#                        id: clf2
#                        size_hint: None,None
#                        size: 200,50
#                        text: '< Select >'
#                        values: ['KNN', 'LDA', 'MLP', 'SVM', 'DTree', 'Bayes']
                StdSettingItem:
                    id: item_lda_solver
                    title: 'LDA Solver'
                    desc: ''
                    Spinner:
                        id: lda_solver
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: ['svd','lsqr','eigen']
                StdSettingSlider:
                    id: svm_c
                    title: 'SVM Regularization Parameter'
                    type: 'int'
                    desc: 'Set the regularization parameter to use in SVM case (log(10^x))'
                    value: -4
                    min: -10
                    max: 10
                StdSettingItem:
                    id: item_svm_kernel
                    title: 'SVM Kernel'
                    desc: ''
                    Spinner:
                        id: svm_kernel
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: ['Linear', 'Poly', 'Sigmoid', 'RBF']
#                StdSettingSlider:
#                    id: svm_gamma
#                    title: 'SVM Gamma Parameter'
#                    type: 'int'
#                    desc: 'Set the gamma parameter to use in SVM case (log(10^x))'
#                    value: -4
#                    min: -10
#                    max: 10
                StdSettingSlider:
                    id: neighbors_knn
                    title: 'KNN Neighbors number'
                    type: 'int'
                    desc: 'Set the neighbors number to use in kNN case'
                    value: 5
                    min: 2
                    max: 180 # root.session.acq.ds_trials_per_class * 2
                StdSettingItem
                    id: item_metric_knn
                    title: 'KNN Metric'
                    desc: ''
                    Spinner:
                        id: metric_knn
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: ['euclidean','manhattan','minkowski','chebyshev'] #['cityblock', 'cosine', 'euclidean', 'l1', 'l2', 'manhattan', 'minkowski', 'chebyshev']
                StdSettingItem:
                    id: item_dtree_criterion
                    title: 'Decision Tree Criterion'
                    desc: ''
                    Spinner:
                        id: dtree_criterion
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: ['gini', 'entropy']
                StdSettingSlider:
                    id: mlp_eta
                    title: 'MLP learn rate'
                    desc: ''
                    type: 'float'
                    value: -3
                    min: -8
                    max: 1
#                StdSettingSlider:
#                    id: mlp_alpha
#                    title: 'MLP Regularization Parameter'
#                    type: 'float'
#                    desc: ''
#                    value: -4
#                    min: -8
#                    max: 1
                StdSettingSlider:
                    id: mlp_hidden_neurons
                    title: 'MLP hidden layer neurons number'
                    type: 'int'
                    desc: 'Set the number of neurons in the hidden layer in MLP case'
                    value: 100
                    min: 10
                    max: 500
                StdSettingSlider:
                    id: mlp_hidden_size
                    title: 'MLP hidden layers'
                    type: 'int'
                    desc: 'Set the number of neurons in the hidden layer in MLP case'
                    value: 1
                    min: 1
                    max: 5
                StdSettingItem:
                    id: item_mlp_activation
                    title: 'MLP Activation Function'
                    desc: ''
                    Spinner:
                        id: mlp_activation
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: ['identity','logistic','tanh','relu']
                StdSettingItem:
                    id: item_mlp_solver
                    title: 'MLP Activation Function'
                    desc: ''
                    Spinner:
                        id: mlp_solver
                        size_hint: None,None
                        size: 200,50
                        text: '< Select >'
                        values: ['adam','sgd','lbfgs']

        GridLayout:
            rows: 1
            size_hint: (1, None)
            height: 50
            spacing: 5
            padding: 5
            Button:
                font_size: 20
                text: 'Back'
                on_press: root.back_to_calLoad()
            Button:
                font_size: 20
                text: 'Train Model'
                on_press: root.calibrate()


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<ControlMenu>:
    on_pre_enter: root.update_screen()
#    label_text: label_text
    AnchorLayout:
        anchor_x: 'center'
        anchor_y: 'center'
        canvas:
            Color:
                rgba: 185, 182, 183, 0.67 # 128, 128, 128, 0.5
            Rectangle:
                size:self.size
                pos:self.pos
        BoxLayout:
            id: box
            orientation: 'vertical'
            spacing: 20
            padding: 20
            size_hint: None, None
            size: self.minimum_size
            Label:
                id: label_msg
                font_size: 20
                text: root.label_text
            Button:
                text: 'Settings'
                on_press: root.change_to_settings()
                size_hint: None,None
                size: 200,50
#            Button:
#                text: 'ArDrone'
#                on_press: root.change_to_ardrone()
#                size_hint: None,None
#                size: 200,50
            Button:
                text: 'Bars Game'
                on_press: root.change_to_bars()
                size_hint: None,None
                size: 200,50
            Button:
                text: 'Galaxy Game'
                on_press: root.change_to_galaxy()
                size_hint: None,None
                size: 200,50
            Button:
                text: 'Target Game'
                on_press: root.change_to_target()
                size_hint: None,None
                size: 200,50
            Button:
                text: 'Back'
                on_press: root.back_to_bci()
                size_hint: None,None
                size: 200,50


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<ControlSettings>
    on_pre_enter: if root.session.control.flag: root.update_settings()
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            canvas:
                Color:
                    rgba: 0, 0, 0,0
                Rectangle:
                    pos: self.pos
                    size: self.size
            StdSettingsContainer:
#                StdSettingTitle:
#                    title: 'Simulator configuration' #u'Configura\u00e7\u00e3o do Simulador'
#                    desc: 'Set the path to local EEG file for playback' #'Defina os caminhos dos arquivos EEG locais'
#                StdSettingItem:
#                    id: item_simulator
#                    title: 'Playback-based control?'
#                    desc: 'Check to simulate from saved eeg data'
#                    Switch:
#                        id: simulator
#                        active: False
#                        size_hint: None,None
#                        on_touch_down: root.update_settings()
#                        on_touch_move: root.update_settings() #simu_data_path.disabled = False if self.active else True
#                        on_touch_up: root.update_settings() #simu_data_path.disabled = False if self.active else True
#
#                GridLayout:
#                    size_hint_y: None
#                    height: 70
#                    rows: 1
#                    canvas:
#                        Color:
#                            rgba: 47 / 255., 167 / 255., 212 / 255., .1
#                        Rectangle:
#                            pos: self.x, self.y + 1
#                            size: self.size
#                        Color:
#                            rgb: .2, .2, .2
#                        Rectangle:
#                            pos: self.x, self.y - 2
#                            size: self.width, 1
#                    Label:
#                        size_hint_x: .6
#                        id: labellayout
#                        markup: True
#                        title: 'Path to EEG data file'
#                        desc: 'The path to the EEG dataset for playback (.omi)'
#                        text: u'{0}\n[size=13sp][color=999999]{1}[/color][/size]'.format(self.title or '', self.desc or '')
#                        font_size: '15sp'
#                        text_size: self.size
#                        valign: 'top'
#                    AnchorLayout:
#                        id: eeg_path
#                        size_hint_x: None
#                        width: 500
#                        value: input.text
#                        TextInput:
#                            id: input
#                            size_hint_y: None
#                            height: 30
#                            multiline: True
#                            text: eeg_path.value
#                            on_focus: root.update_settings()

                StdSettingTitle:
                    title: 'General Control Settings'
                    desc: 'Set general control parameters'
                StdSettingSlider:
                    id: game_threshold
                    title: 'Threshold to action'
                    type: 'int'
                    desc: 'Limit to the sum of steps which triggers and action'
                    value: 200
                    min: 0
                    max: 1000
                StdSettingSlider:
                    id: window_overlap
                    title: 'Window overlap'
                    type: 'int'
                    desc: 'The interval (in samples) at which a new step is added'
                    value: 25
                    min: 10
                    max: 500
                StdSettingSlider:
                    id: warning_threshold
                    title: 'Warning Threshold in \%'
                    type: 'int'
                    desc: 'The percentage of the Threshold to Action at which a Warning is displayed'
                    value: 80
                    min: 0
                    max: 100
                StdSettingBoolean:
                    id: inst_prob
                    title: 'Instant Probability Bar'
                    desc: 'Check if you want to display the instant probability bars'
                    button_text: 'Inst prob'
                    value: False
                StdSettingTitle:
                    title: 'Target Game Settings'
                    desc: 'Set Target game parameters'
                StdSettingSlider:
                    id: forward_speed
                    title: 'Player Speed'
                    type: 'float'
                    desc: 'Time in msec to move 1px'
                    value: 25
                    min: 1
                    max: 300
                StdSettingBoolean:
                    id: keyb_enable
                    title: 'Keyboard Control'
                    desc: 'Check if you want to enable control by keyboard (prob calc will be disabled)'
                    value: False
                StdSettingTitle:
                    title: 'Action Settings'
                    desc: 'Set action parameters'
                StdSettingString:
                    id: action_cmd1
                    title: 'Linux Command for class 1'
                    desc: 'Command (linux) to be executed when threshold 1 is reached'
                    value: ''
                StdSettingString:
                    id: action_cmd2
                    title: 'Linux Command for class 2'
                    desc: 'Command (linux) to be executed when threshold 2 is reached'
                    value: ''
        GridLayout:
            rows: 1
            size_hint: (1, None)
            height: 50
            spacing: 5
            padding: 5
            Button:
                font_size: 20
                text: 'Back'
                size: 430,50
                on_press: root.back_to_control_menu()
            Button:
                font_size: 20
                text: 'Save'
                size: 430,50
                on_press: root.save_config()

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<BarsRun>:
#    on_pre_enter: self.wt = root.session.control.warning_threshold / 100.0
    on_pre_enter: self.wt = self.session.control.game_threshold / root.session.control.warning_threshold
    BoxLayout:
        orientation: 'vertical'
        spacing: 10
        padding: 20
        BoxLayout:
            orientation: 'horizontal'
            spacing: 10
            padding: 20
            BoxLayout:
                size_hint_x: 0.1
                canvas:
                    Color:
                        rgba: 1,1,0,1
                    Line:
                        width: 2
                        points:
                            (0, self.pos[1] + self.size[1]*root.wt, \
                            self.size[0]/2, self.pos[1] + self.size[1]*root.wt)
                Bar:
                    orientation: 'bt'
                    color: root.accum_color_left
                    animated: False
                    value: root.accum_prob_left
                Bar:
                    orientation: 'bt'
                    color: [0,1,0,.5]
                    animated: False
                    value: root.inst_prob_left
            BoxLayout:
                size_hint_x: 0.8
            BoxLayout:
                size_hint_x: 0.1
                canvas:
                    Color:
                        rgba: 1,1,0,1
                    Line:
                        width: 2
                        points:
                            (self.size[0]/2 + self.pos[0], self.pos[1] + self.size[1]*root.wt, \
                            root.size[0], self.pos[1] + self.size[1]*root.wt)
                Bar:
                    orientation: 'bt'
                    color: [0,1,0,.5]
                    animated: False
                    value: root.inst_prob_right
                Bar:
                    orientation: 'bt'
                    color: root.accum_color_right
                    animated: False
                    value: root.accum_prob_right
        BoxLayout:
            orientation: 'horizontal'
            size_hint: (1, 0.2)
            spacing: 10
            BoxLayout:
                orientation: 'vertical'
                size_hint: (0.3, 1)
                Button:
                    text: root.label_on_toggle_button
                    on_press: root.toogle_stream()
                    size_hint: None,None
                    size: 200,50
                Button:
                    text: 'Back'
                    on_press: root.back_to_control_menu()
                    size_hint: None,None
                    size: 200,50
            BoxLayout:
                id: label_box
                size_hint: (0.7, 1)
                Label:
                    text: 'Current Label: ' + str(root.current_label)
<GameDataPopup>:
    size_hint: None, None
    size: 300, 250
    title: 'Game Results'
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            TextInput:
                id: save_name
                hint_text: 'save as'
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'Save Results'
                on_press: root.save_data(save_name.text)

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<GalaxyMenu>:
#    on_pre_enter: self.wt = self.session.control.game_threshold / root.session.control.warning_threshold
    BoxLayout:
        orientation: 'vertical'
        spacing: 0
        padding: 5
        canvas.before:
            Rectangle:
                pos: self.pos
                size: self.size
                source: "tests/galaxy_game/space2.png"
#        Label:
#            font_size: 20
#            text: 'Galaxy Game'
        BoxLayout:
            orientation: 'horizontal'
            spacing: 10
            padding: 20
        BoxLayout:
            orientation: 'horizontal'
            size_hint: (1, 0.3)
            spacing: 10
            BoxLayout:
                orientation: 'vertical'
                size_hint: (0.3, 1)
                Button:
                    text: root.label_on_toggle_button
                    on_press: root.toogle_stream()
                    size_hint: None,None
                    size: 200,50
                Button:
                    text: 'Settings'
                    on_press: root.change_to_settingsGalaxy()
                    size_hint: None,None
                    size: 200,50
                Button:
                    text: 'Back'
                    on_press: root.back_to_control_menu()
                    size_hint: None,None
                    size: 200,50

<GameDataPopup>:
    size_hint: None, None
    size: 300, 250
    title: 'Game Results'
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            TextInput:
                id: save_name
                hint_text: 'save as'
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'Save Results'
                on_press: root.save_data(save_name.text)


#    AnchorLayout:
#        anchor_x: 'center'
#        anchor_y: 'center'
#        canvas:
#            Color:
#                rgba: 185, 182, 183, 0.67 # 128, 128, 128, 0.5
#            Rectangle:
#                size:self.size
#                pos:self.pos
#        BoxLayout:
#            id: box
#            orientation: 'vertical'
#            spacing: 20
#            padding: 20
#            size_hint: None, None
#            size: self.minimum_size
#            Label:
#                font_size: 20
#                text: 'Galaxy Game Menu'
#            Button:
#                id: acq_button
#                text: 'Settings'
#                on_press: root.change_to_settingsGalaxy()
#                size_hint: None,None
#                size: 200,50
#            Button:
#                text: 'Start Game'
#                on_press: root.change_to_playGalaxy()
#                size_hint: None,None
#                size: 200,50
#            Button:
#                text: 'Back'
#                on_press: root.back_to_control_menu()
#                size_hint: None,None
#                size: 200,50


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<GalaxySettings>:
    on_pre_enter: if root.session.control.flag: root.update_settings()
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            canvas:
                Color:
                    rgba: 0, 0, 0,0
                Rectangle:
                    pos: self.pos
                    size: self.size
            StdSettingsContainer:
                StdSettingTitle:
                    title: 'General Control Settings'
                    desc: 'Set general control parameters'
                StdSettingSlider:
                    id: game_threshold
                    title: 'Threshold to action'
                    type: 'int'
                    desc: 'Limit to the sum of steps which triggers and action'
                    value: 200
                    min: 0
                    max: 1000
                StdSettingSlider:
                    id: window_overlap
                    title: 'Window overlap'
                    type: 'int'
                    desc: 'The interval (in samples) at which a new step is added'
                    value: 25
                    min: 10
                    max: 500
                StdSettingSlider:
                    id: warning_threshold
                    title: 'Warning Threshold in \%'
                    type: 'int'
                    desc: 'The percentage of the Threshold to Action at which a Warning is displayed'
                    value: 80
                    min: 0
                    max: 100
                StdSettingBoolean:
                    id: inst_prob
                    title: 'Instant Probability Bar'
                    desc: 'Check if you want to display the instant probability bars'
                    button_text: 'Inst prob'
                    value: False
                StdSettingTitle:
                    title: 'Target Game Settings'
                    desc: 'Set Target game parameters'
                StdSettingSlider:
                    id: forward_speed
                    title: 'Player Speed'
                    type: 'float'
                    desc: 'Time in msec to move 1px'
                    value: 25
                    min: 1
                    max: 300
                StdSettingBoolean:
                    id: keyb_enable
                    title: 'Keyboard Control'
                    desc: 'Check if you want to enable control by keyboard (prob calc will be disabled)'
                    value: False
                StdSettingTitle:
                    title: 'Action Settings'
                    desc: 'Set action parameters'
                StdSettingString:
                    id: action_cmd1
                    title: 'Linux Command for class 1'
                    desc: 'Command (linux) to be executed when threshold 1 is reached'
                    value: ''
                StdSettingString:
                    id: action_cmd2
                    title: 'Linux Command for class 2'
                    desc: 'Command (linux) to be executed when threshold 2 is reached'
                    value: ''
        GridLayout:
            rows: 1
            size_hint: (1, None)
            height: 50
            spacing: 5
            padding: 5
            Button:
                font_size: 20
                text: 'Back'
                size: 430,50
                on_press: root.back_to_galaxy_menu()
            Button:
                font_size: 20
                text: 'Save'
                size: 430,50
                on_press: root.save_config()


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<GalaxyPlay>:


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<TargetRun>:
    on_pre_enter: self.wt = root.session.control.warning_threshold / 100.0 # if root.session.control.flag else (80.0/100.0)
    game: game
    BoxLayout:
        orientation: 'vertical'
        spacing: 10
        padding: 20
        BoxLayout:
            orientation: 'horizontal'
            spacing: 30
            padding: 20
            BoxLayout:
                size_hint_x: 0.1
                canvas:
                    Color:
                        rgba: 1,1,0,1
                    Line:
                        width: 2
                        points:
                            (0, self.pos[1] + self.size[1] * root.wt, \
                            self.size[0]/2, self.pos[1] + self.size[1]*root.wt)
                Bar:
                    orientation: 'bt'
                    color: root.accum_color_left
                    animated: False
                    value: root.
                    value: root.accum_prob_left
                Bar:
                    orientation: 'bt'
                    color: [0,1,0,0.7]
                    animated: False
                    value: root.inst_prob_left
            RelativeLayout:
                size_hint_x: 0.8
                Game:
                    id: game
            BoxLayout:
                size_hint_x: 0.1
                canvas:
                    Color:
                        rgba: 1,1,0,1
                    Line:
                        width: 2
                        points:
                            (self.size[0]/2 + self.pos[0], self.pos[1] + self.size[1]*root.wt, \
                            root.size[0], self.pos[1] + self.size[1]*root.wt)
                Bar:
                    orientation: 'bt'
                    color: [0,1,0,.7]
                    animated: False
                    value: root.inst_prob_right
                Bar:
                    orientation: 'bt'
                    color: root.accum_color_right
                    animated: False
                    value: root.accum_prob_right
        BoxLayout:
            orientation: 'horizontal'
            size_hint: (1, 0.2)
            spacing: 10
            BoxLayout:
                orientation: 'vertical'
                size_hint: (0.3, 1)
                Button:
                    text: root.label_on_toggle_button
                    on_press: root.toogle_stream()
                    size_hint: None,None
                    size: 200,50
                Button:
                    text: 'Back'
                    on_press: root.back_to_control_menu()
                    size_hint: None,None
                    size: 200,50
            BoxLayout:
                size_hint: (0.7, 1)
                Label:
                    text: 'Current Label: ' + str(root.current_label)
<Game>:
    player: game_player
    target: game_target
    canvas:
        Color:
            rgba: (.1, .1, .1, 1)
        Rectangle:
            pos: self.pos
            size: self.size
    GamePlayer:
        id: game_player
        size_hint: (None, None)
    GameTarget:
        id: game_target
        size_hint: (None, None)
<GamePlayer>:
    size_hint: (None, None)
    size: (30,30)
    canvas:
        Color:
            rgba: (1, 1, 1, 1)
        Triangle:
            points: self.points
<GameTarget>:
    size_hint: (None, None)
    size: (50,50)
    canvas:
        Color:
            rgba: root.t_color
        Rectangle:
            pos: root.pos
            size: self.size
<GameResultsPopup>:
    size_hint: None, None
    size: 300, 250
    title: 'Game Results'
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            Label:
                text: 'Hits:'
            Label:
                text: str(root.hits)
        BoxLayout:
            Label:
                text: 'Average Time (s):'
            Label:
                text: str(round(sum(root.res) / float(len(root.res)),3))
        BoxLayout:
            Label:
                text: 'Max Time to target:'
            Label:
                text: str(round(max(root.res),3))
        BoxLayout:
            Label:
                text: 'Min Time to target:'
            Label:
                text: str(round(min(root.res),3))
        BoxLayout:
            TextInput:
                id: save_name
                hint_text: 'save as'
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'Save Results'
                on_press: root.save_results(save_name.text)

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<DroneRun>:
    on_pre_enter:
        self.wt = root.session.control.warning_threshold / 100.0
        root.start_drone()
    BoxLayout:
        orientation: 'vertical'
        spacing: 10
        padding: 20
        BoxLayout:
            orientation: 'horizontal'
            spacing: 10
            padding: 20
            BoxLayout:
                size_hint_x: 0.1
                canvas:
                    Color:
                        rgba: 1,1,0,1
                    Line:
                        width: 2
                        points:
                            (0, self.pos[1] + self.size[1]*root.wt, \
                            self.size[0]/2, self.pos[1] + self.size[1]*root.wt)
                Bar:
                    orientation: 'bt'
                    color: root.accum_color_left
                    animated: False
                    value: root.accum_prob_left
                Bar:
                    orientation: 'bt'
                    color: [0,1,0,.5]
                    animated: False
                    value: root.inst_prob_left
            BoxLayout:
                size_hint_x: 0.8
            BoxLayout:
                size_hint_x: 0.1
                canvas:
                    Color:
                        rgba: 1,1,0,1
                    Line:
                        width: 2
                        points:
                            (self.size[0]/2 + self.pos[0], self.pos[1] + self.size[1]*root.wt, \
                            root.size[0], self.pos[1] + self.size[1]*root.wt)
                Bar:
                    orientation: 'bt'
                    color: [0,1,0,.5]
                    animated: False
                    value: root.inst_prob_right
                Bar:
                    orientation: 'bt'
                    color: root.accum_color_right
                    animated: False
                    value: root.accum_prob_right
        BoxLayout:
            orientation: 'horizontal'
            size_hint: (1, 0.2)
            spacing: 10
            BoxLayout:
                orientation: 'vertical'
                size_hint: (0.3, 1)
                Button:
                    text: root.label_on_toggle_button
                    on_press: root.toogle_stream()
                    size_hint: None,None
                    size: 200,50
                Button:
                    text: 'Back'
                    on_press: root.change_to_drone()
                    size_hint: None,None
                    size: 200,50
            BoxLayout:
                id: label_box
                size_hint: (0.7, 1)
                Label:
                    text: 'Current Label: ' + str(root.current_label)
<DroneResultsPopup>:
    size_hint: None, None
    size: 300, 250
    title: 'Game Results'
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            TextInput:
                id: save_name
                hint_text: 'save as'
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'Save Results'
                on_press: root.save_results(save_name.text)

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<DroneMenu>:


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<DroneSettings>:
    on_pre_enter: if root.session.control.flag: root.update_settings()
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            canvas:
                Color:
                    rgba: 0, 0, 0,0
                Rectangle:
                    pos: self.pos
                    size: self.size
            StdSettingsContainer:
                StdSettingTitle:
                    title: 'Ardrone Game Settings'
                    desc: 'Set ardrone game parameters'
        GridLayout:
            rows: 1
            size_hint: (1, None)
            height: 50
            spacing: 5
            padding: 5
            Button:
                font_size: 20
                text: 'Back'
                size: 430,50
                on_press: root.change_to_drone()
            Button:
                font_size: 20
                text: 'Save'
                size: 430,50
                on_press: root.save_config()

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        #### SETTINGS TEMPLATE ####
<StdSettingsContainer>:
    cols: 1
    spacing: 5
    padding: 5
    size_hint_y: None
    height: self.minimum_height
    on_minimum_height:
        self.height=self.minimum_height

<StdSettingItem>:
    size_hint_y: None
    height: 70
    rows: 1
    canvas:
        Color:
            rgba: 47 / 255., 167 / 255., 212 / 255., .1
        Rectangle:
            pos: self.x, self.y + 1
            size: self.size
        Color:
            rgb: .2, .2, .2
        Rectangle:
            pos: self.x, self.y - 2
            size: self.width, 1
    Label:
        size_hint_x: .6
        id: labellayout
        markup: True
        text: u'{0}\n[size=13sp][color=999999]{1}[/color][/size]'.format(root.title or '', root.desc or '')
        font_size: '15sp'
        text_size: self.size
        valign: 'top'

<StdSettingTitle>:
    size_hint_y: None
    height: 40
    markup: True
    text: u'{0}\n[size=13sp][color=999999]{1}[/color][/size]'.format(root.title or '', root.desc or '')
    font_size: '15sp'
    text_size: self.size
    valign: 'top'
    halign: 'right'
    canvas:
        Color:
            rgba: 47 / 255., 167 / 255., 212 / 255., .4
        Rectangle:
            pos: self.x, self.y + 1
            size: self.size
        Color:
            rgb: .5, .5, .5
        Rectangle:
            pos: self.x, self.y - 2
            size: self.width, 1

<StdSettingBoolean>:
    value: button.state == 'down' and True or False
    ToggleButton:
        id: button
        text: root.button_text
        size_hint_x: None
        width: 150
        pos: root.pos
        state: root.value and 'down' or 'normal'

<StdSettingString>:
    value: input.text
    AnchorLayout:
        size_hint_x: None
        width: 150
        TextInput:
            id: input
            size_hint_y: None
            height: 30
            pos: root.pos
            multiline: True
            text: root.value

<StdSettingStringLong>:
    value: input.text
    AnchorLayout:
        size_hint_x: None
        width: 500
        TextInput:
            id: input
            size_hint_y: None
            height: 30
            pos: root.pos
            multiline: True
            text: root.value

<StdSettingSlider>:
    value: root._to_numtype(slider.value)
    Label:
        id: sliderlabel
        size_hint_x: None
        width: 50
        text: str(root._to_numtype(slider.value))
    Slider:
        id: slider
        min: root.min
        max: root.max
        pos: root.pos
        size_hint_x: None
        width: 150
        value: root.value

<EditSettingPopup>:
    size_hint: None, None
    size: 300, 150
    title: 'Edit setting'
    BoxLayout:
        orientation: 'vertical'
        TextInput:
            id: input
            markup: False
            multiline: False
            on_text_validate: root.dispatch('on_validate', self.text)
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'OK'
                on_press: root.dispatch('on_validate', input.text)
            Button:
                text: 'Cancel'
                on_press: root.dismiss()