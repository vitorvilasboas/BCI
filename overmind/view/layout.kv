



#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<BarsRun>:
#    on_pre_enter: self.wt = root.session.control.warning_threshold / 100.0
    on_pre_enter: self.wt = self.session.control.game_threshold / root.session.control.warning_threshold
    BoxLayout:
        orientation: 'vertical'
        spacing: 10
        padding: 20
        BoxLayout:
            orientation: 'horizontal'
            spacing: 10
            padding: 20
            BoxLayout:
                size_hint_x: 0.1
                canvas:
                    Color:
                        rgba: 1,1,0,1
                    Line:
                        width: 2
                        points:
                            (0, self.pos[1] + self.size[1]*root.wt, \
                            self.size[0]/2, self.pos[1] + self.size[1]*root.wt)
                Bar:
                    orientation: 'bt'
                    color: root.accum_color_left
                    animated: False
                    value: root.accum_prob_left
                Bar:
                    orientation: 'bt'
                    color: [0,1,0,.5]
                    animated: False
                    value: root.inst_prob_left
            BoxLayout:
                size_hint_x: 0.8
            BoxLayout:
                size_hint_x: 0.1
                canvas:
                    Color:
                        rgba: 1,1,0,1
                    Line:
                        width: 2
                        points:
                            (self.size[0]/2 + self.pos[0], self.pos[1] + self.size[1]*root.wt, \
                            root.size[0], self.pos[1] + self.size[1]*root.wt)
                Bar:
                    orientation: 'bt'
                    color: [0,1,0,.5]
                    animated: False
                    value: root.inst_prob_right
                Bar:
                    orientation: 'bt'
                    color: root.accum_color_right
                    animated: False
                    value: root.accum_prob_right
        BoxLayout:
            orientation: 'horizontal'
            size_hint: (1, 0.2)
            spacing: 10
            BoxLayout:
                orientation: 'vertical'
                size_hint: (0.3, 1)
                Button:
                    text: root.label_on_toggle_button
                    on_press: root.toogle_stream()
                    size_hint: None,None
                    size: 200,50
                Button:
                    text: 'Back'
                    on_press: root.back_to_control_menu()
                    size_hint: None,None
                    size: 200,50
            BoxLayout:
                id: label_box
                size_hint: (0.7, 1)
                Label:
                    text: 'Current Label: ' + str(root.current_label)
<GameDataPopup>:
    size_hint: None, None
    size: 300, 250
    title: 'Game Results'
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            TextInput:
                id: save_name
                hint_text: 'save as'
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'Save Results'
                on_press: root.save_data(save_name.text)

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<GalaxyMenu>:
#    on_pre_enter: self.wt = self.session.control.game_threshold / root.session.control.warning_threshold
    BoxLayout:
        orientation: 'vertical'
        spacing: 0
        padding: 5
        canvas.before:
            Rectangle:
                pos: self.pos
                size: self.size
                source: "tests/galaxy_game/space2.png"
#        Label:
#            font_size: 20
#            text: 'Galaxy Game'
        BoxLayout:
            orientation: 'horizontal'
            spacing: 10
            padding: 20
        BoxLayout:
            orientation: 'horizontal'
            size_hint: (1, 0.3)
            spacing: 10
            BoxLayout:
                orientation: 'vertical'
                size_hint: (0.3, 1)
                Button:
                    text: root.label_on_toggle_button
                    on_press: root.toogle_stream()
                    size_hint: None,None
                    size: 200,50
                Button:
                    text: 'Settings'
                    on_press: root.change_to_settingsGalaxy()
                    size_hint: None,None
                    size: 200,50
                Button:
                    text: 'Back'
                    on_press: root.back_to_control_menu()
                    size_hint: None,None
                    size: 200,50

<GameDataPopup>:
    size_hint: None, None
    size: 300, 250
    title: 'Game Results'
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            TextInput:
                id: save_name
                hint_text: 'save as'
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'Save Results'
                on_press: root.save_data(save_name.text)


#    AnchorLayout:
#        anchor_x: 'center'
#        anchor_y: 'center'
#        canvas:
#            Color:
#                rgba: 185, 182, 183, 0.67 # 128, 128, 128, 0.5
#            Rectangle:
#                size:self.size
#                pos:self.pos
#        BoxLayout:
#            id: box
#            orientation: 'vertical'
#            spacing: 20
#            padding: 20
#            size_hint: None, None
#            size: self.minimum_size
#            Label:
#                font_size: 20
#                text: 'Galaxy Game Menu'
#            Button:
#                id: acq_button
#                text: 'Settings'
#                on_press: root.change_to_settingsGalaxy()
#                size_hint: None,None
#                size: 200,50
#            Button:
#                text: 'Start Game'
#                on_press: root.change_to_playGalaxy()
#                size_hint: None,None
#                size: 200,50
#            Button:
#                text: 'Back'
#                on_press: root.back_to_control_menu()
#                size_hint: None,None
#                size: 200,50


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<GalaxySettings>:
    on_pre_enter: if root.session.control.flag: root.update_settings()
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            canvas:
                Color:
                    rgba: 0, 0, 0,0
                Rectangle:
                    pos: self.pos
                    size: self.size
            StdSettingsContainer:
                StdSettingTitle:
                    title: 'General Control Settings'
                    desc: 'Set general control parameters'
                StdSettingSlider:
                    id: game_threshold
                    title: 'Threshold to action'
                    type: 'int'
                    desc: 'Limit to the sum of steps which triggers and action'
                    value: 200
                    min: 0
                    max: 1000
                StdSettingSlider:
                    id: window_overlap
                    title: 'Window overlap'
                    type: 'int'
                    desc: 'The interval (in samples) at which a new step is added'
                    value: 25
                    min: 10
                    max: 500
                StdSettingSlider:
                    id: warning_threshold
                    title: 'Warning Threshold in \%'
                    type: 'int'
                    desc: 'The percentage of the Threshold to Action at which a Warning is displayed'
                    value: 80
                    min: 0
                    max: 100
                StdSettingBoolean:
                    id: inst_prob
                    title: 'Instant Probability Bar'
                    desc: 'Check if you want to display the instant probability bars'
                    button_text: 'Inst prob'
                    value: False
                StdSettingTitle:
                    title: 'Target Game Settings'
                    desc: 'Set Target game parameters'
                StdSettingSlider:
                    id: forward_speed
                    title: 'Player Speed'
                    type: 'float'
                    desc: 'Time in msec to move 1px'
                    value: 25
                    min: 1
                    max: 300
                StdSettingBoolean:
                    id: keyb_enable
                    title: 'Keyboard Control'
                    desc: 'Check if you want to enable control by keyboard (prob calc will be disabled)'
                    value: False
                StdSettingTitle:
                    title: 'Action Settings'
                    desc: 'Set action parameters'
                StdSettingString:
                    id: action_cmd1
                    title: 'Linux Command for class 1'
                    desc: 'Command (linux) to be executed when threshold 1 is reached'
                    value: ''
                StdSettingString:
                    id: action_cmd2
                    title: 'Linux Command for class 2'
                    desc: 'Command (linux) to be executed when threshold 2 is reached'
                    value: ''
        GridLayout:
            rows: 1
            size_hint: (1, None)
            height: 50
            spacing: 5
            padding: 5
            Button:
                font_size: 20
                text: 'Back'
                size: 430,50
                on_press: root.back_to_galaxy_menu()
            Button:
                font_size: 20
                text: 'Save'
                size: 430,50
                on_press: root.save_config()


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<GalaxyPlay>:


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<TargetRun>:
    on_pre_enter: self.wt = root.session.control.warning_threshold / 100.0 # if root.session.control.flag else (80.0/100.0)
    game: game
    BoxLayout:
        orientation: 'vertical'
        spacing: 10
        padding: 20
        BoxLayout:
            orientation: 'horizontal'
            spacing: 30
            padding: 20
            BoxLayout:
                size_hint_x: 0.1
                canvas:
                    Color:
                        rgba: 1,1,0,1
                    Line:
                        width: 2
                        points:
                            (0, self.pos[1] + self.size[1] * root.wt, \
                            self.size[0]/2, self.pos[1] + self.size[1]*root.wt)
                Bar:
                    orientation: 'bt'
                    color: root.accum_color_left
                    animated: False
                    value: root.
                    value: root.accum_prob_left
                Bar:
                    orientation: 'bt'
                    color: [0,1,0,0.7]
                    animated: False
                    value: root.inst_prob_left
            RelativeLayout:
                size_hint_x: 0.8
                Game:
                    id: game
            BoxLayout:
                size_hint_x: 0.1
                canvas:
                    Color:
                        rgba: 1,1,0,1
                    Line:
                        width: 2
                        points:
                            (self.size[0]/2 + self.pos[0], self.pos[1] + self.size[1]*root.wt, \
                            root.size[0], self.pos[1] + self.size[1]*root.wt)
                Bar:
                    orientation: 'bt'
                    color: [0,1,0,.7]
                    animated: False
                    value: root.inst_prob_right
                Bar:
                    orientation: 'bt'
                    color: root.accum_color_right
                    animated: False
                    value: root.accum_prob_right
        BoxLayout:
            orientation: 'horizontal'
            size_hint: (1, 0.2)
            spacing: 10
            BoxLayout:
                orientation: 'vertical'
                size_hint: (0.3, 1)
                Button:
                    text: root.label_on_toggle_button
                    on_press: root.toogle_stream()
                    size_hint: None,None
                    size: 200,50
                Button:
                    text: 'Back'
                    on_press: root.back_to_control_menu()
                    size_hint: None,None
                    size: 200,50
            BoxLayout:
                size_hint: (0.7, 1)
                Label:
                    text: 'Current Label: ' + str(root.current_label)
<Game>:
    player: game_player
    target: game_target
    canvas:
        Color:
            rgba: (.1, .1, .1, 1)
        Rectangle:
            pos: self.pos
            size: self.size
    GamePlayer:
        id: game_player
        size_hint: (None, None)
    GameTarget:
        id: game_target
        size_hint: (None, None)
<GamePlayer>:
    size_hint: (None, None)
    size: (30,30)
    canvas:
        Color:
            rgba: (1, 1, 1, 1)
        Triangle:
            points: self.points
<GameTarget>:
    size_hint: (None, None)
    size: (50,50)
    canvas:
        Color:
            rgba: root.t_color
        Rectangle:
            pos: root.pos
            size: self.size
<GameResultsPopup>:
    size_hint: None, None
    size: 300, 250
    title: 'Game Results'
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            Label:
                text: 'Hits:'
            Label:
                text: str(root.hits)
        BoxLayout:
            Label:
                text: 'Average Time (s):'
            Label:
                text: str(round(sum(root.res) / float(len(root.res)),3))
        BoxLayout:
            Label:
                text: 'Max Time to target:'
            Label:
                text: str(round(max(root.res),3))
        BoxLayout:
            Label:
                text: 'Min Time to target:'
            Label:
                text: str(round(min(root.res),3))
        BoxLayout:
            TextInput:
                id: save_name
                hint_text: 'save as'
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'Save Results'
                on_press: root.save_results(save_name.text)

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<DroneRun>:
    on_pre_enter:
        self.wt = root.session.control.warning_threshold / 100.0
        root.start_drone()
    BoxLayout:
        orientation: 'vertical'
        spacing: 10
        padding: 20
        BoxLayout:
            orientation: 'horizontal'
            spacing: 10
            padding: 20
            BoxLayout:
                size_hint_x: 0.1
                canvas:
                    Color:
                        rgba: 1,1,0,1
                    Line:
                        width: 2
                        points:
                            (0, self.pos[1] + self.size[1]*root.wt, \
                            self.size[0]/2, self.pos[1] + self.size[1]*root.wt)
                Bar:
                    orientation: 'bt'
                    color: root.accum_color_left
                    animated: False
                    value: root.accum_prob_left
                Bar:
                    orientation: 'bt'
                    color: [0,1,0,.5]
                    animated: False
                    value: root.inst_prob_left
            BoxLayout:
                size_hint_x: 0.8
            BoxLayout:
                size_hint_x: 0.1
                canvas:
                    Color:
                        rgba: 1,1,0,1
                    Line:
                        width: 2
                        points:
                            (self.size[0]/2 + self.pos[0], self.pos[1] + self.size[1]*root.wt, \
                            root.size[0], self.pos[1] + self.size[1]*root.wt)
                Bar:
                    orientation: 'bt'
                    color: [0,1,0,.5]
                    animated: False
                    value: root.inst_prob_right
                Bar:
                    orientation: 'bt'
                    color: root.accum_color_right
                    animated: False
                    value: root.accum_prob_right
        BoxLayout:
            orientation: 'horizontal'
            size_hint: (1, 0.2)
            spacing: 10
            BoxLayout:
                orientation: 'vertical'
                size_hint: (0.3, 1)
                Button:
                    text: root.label_on_toggle_button
                    on_press: root.toogle_stream()
                    size_hint: None,None
                    size: 200,50
                Button:
                    text: 'Back'
                    on_press: root.change_to_drone()
                    size_hint: None,None
                    size: 200,50
            BoxLayout:
                id: label_box
                size_hint: (0.7, 1)
                Label:
                    text: 'Current Label: ' + str(root.current_label)
<DroneResultsPopup>:
    size_hint: None, None
    size: 300, 250
    title: 'Game Results'
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            TextInput:
                id: save_name
                hint_text: 'save as'
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'Save Results'
                on_press: root.save_results(save_name.text)

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<DroneMenu>:


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<DroneSettings>:
    on_pre_enter: if root.session.control.flag: root.update_settings()
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            canvas:
                Color:
                    rgba: 0, 0, 0,0
                Rectangle:
                    pos: self.pos
                    size: self.size
            StdSettingsContainer:
                StdSettingTitle:
                    title: 'Ardrone Game Settings'
                    desc: 'Set ardrone game parameters'
        GridLayout:
            rows: 1
            size_hint: (1, None)
            height: 50
            spacing: 5
            padding: 5
            Button:
                font_size: 20
                text: 'Back'
                size: 430,50
                on_press: root.change_to_drone()
            Button:
                font_size: 20
                text: 'Save'
                size: 430,50
                on_press: root.save_config()

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        #### SETTINGS TEMPLATE ####
<StdSettingsContainer>:
    cols: 1
    spacing: 5
    padding: 5
    size_hint_y: None
    height: self.minimum_height
    on_minimum_height:
        self.height=self.minimum_height

<StdSettingItem>:
    size_hint_y: None
    height: 70
    rows: 1
    canvas:
        Color:
            rgba: 47 / 255., 167 / 255., 212 / 255., .1
        Rectangle:
            pos: self.x, self.y + 1
            size: self.size
        Color:
            rgb: .2, .2, .2
        Rectangle:
            pos: self.x, self.y - 2
            size: self.width, 1
    Label:
        size_hint_x: .6
        id: labellayout
        markup: True
        text: u'{0}\n[size=13sp][color=999999]{1}[/color][/size]'.format(root.title or '', root.desc or '')
        font_size: '15sp'
        text_size: self.size
        valign: 'top'

<StdSettingTitle>:
    size_hint_y: None
    height: 40
    markup: True
    text: u'{0}\n[size=13sp][color=999999]{1}[/color][/size]'.format(root.title or '', root.desc or '')
    font_size: '15sp'
    text_size: self.size
    valign: 'top'
    halign: 'right'
    canvas:
        Color:
            rgba: 47 / 255., 167 / 255., 212 / 255., .4
        Rectangle:
            pos: self.x, self.y + 1
            size: self.size
        Color:
            rgb: .5, .5, .5
        Rectangle:
            pos: self.x, self.y - 2
            size: self.width, 1

<StdSettingBoolean>:
    value: button.state == 'down' and True or False
    ToggleButton:
        id: button
        text: root.button_text
        size_hint_x: None
        width: 150
        pos: root.pos
        state: root.value and 'down' or 'normal'

<StdSettingString>:
    value: input.text
    AnchorLayout:
        size_hint_x: None
        width: 150
        TextInput:
            id: input
            size_hint_y: None
            height: 30
            pos: root.pos
            multiline: True
            text: root.value

<StdSettingStringLong>:
    value: input.text
    AnchorLayout:
        size_hint_x: None
        width: 500
        TextInput:
            id: input
            size_hint_y: None
            height: 30
            pos: root.pos
            multiline: True
            text: root.value

<StdSettingSlider>:
    value: root._to_numtype(slider.value)
    Label:
        id: sliderlabel
        size_hint_x: None
        width: 50
        text: str(root._to_numtype(slider.value))
    Slider:
        id: slider
        min: root.min
        max: root.max
        pos: root.pos
        size_hint_x: None
        width: 150
        value: root.value

<EditSettingPopup>:
    size_hint: None, None
    size: 300, 150
    title: 'Edit setting'
    BoxLayout:
        orientation: 'vertical'
        TextInput:
            id: input
            markup: False
            multiline: False
            on_text_validate: root.dispatch('on_validate', self.text)
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'OK'
                on_press: root.dispatch('on_validate', input.text)
            Button:
                text: 'Cancel'
                on_press: root.dismiss()